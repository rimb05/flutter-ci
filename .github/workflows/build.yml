name: build engine for Raspberry Pi 3 & 4 and generic ARMv7 & AArch64. 

on:
  push:
    tags:
      - 'engine/*'
  pull_request:
    branches: [ ci ]
  repository_dispatch:
  workflow_dispatch:
  workflow_call:
  
jobs:
  resolve-version:
    name: 'Resolve relevant flutter versions'
    runs-on: ubuntu-latest
    outputs:
      engine-hash: ${{ steps.engine-commit.outputs.hash }}
      first-semver: ${{ steps.flutter-sdk-version.outputs.first-semver }}
      sdk-semvers: ${{ steps.flutter-sdk-version.outputs.semvers }}
    steps:
      - uses: actions/checkout@v3
        
      - run: |
          echo github.ref: ${{ github.ref }}

      - name: Read stable engine version
        id: engine-commit

        # Read the engine.version.stable file and trim away anything that's not a hex digit
        # (So we don't include whitespace in the output variable, if that's possible)
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT
      
      - name: Log stable engine version
        run: |
          echo stable engine version: "${{ steps.engine-commit.outputs.hash }}"
      
      - name: Cache flutter engine
        id: cache-engine
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-flutter-engine
          path: flutter_engine

      # We need to checkout the complete flutter SDK to find the semver.
      - name: Checkout flutter engine
        uses: actions/checkout@v3
        with:
          repository: flutter/engine
          ref: ${{ steps.engine-commit.outputs.hash }}
          path: flutter_engine
          fetch-depth: 0  # fetch complete history
      
      - name: Log git status
        working-directory: flutter_engine
        run: |
          git status
          git tag -l --points-at ${{ steps.engine-commit.outputs.hash }}
      
      # reference: https://github.com/flutter/flutter/blob/a880c4ed3590477380c975f867406ba336834848/packages/flutter_tools/lib/src/version.dart#L703
      # if the flutter people ever decide to point more than one tags at the stable SDK commit we're in trouble here
      - name: Find out flutter SDK semvers for this engine version
        id: flutter-sdk-version
        working-directory: flutter_engine
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
         
          echo "semvers<<$EOF" >> "$GITHUB_OUTPUT"
          (( echo "[" && git tag -l --points-at ${{ steps.engine-commit.outputs.hash }} --format='"%(refname:strip=2)",' && echo "null]" ) | tr -d [:space:] ) | jq -cM .[:-1] >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"

          echo "first-semver=$(git tag -l --points-at ${{ steps.engine-commit.outputs.hash }} | head -n1)" >> "$GITHUB_OUTPUT"

      - name: Log flutter SDK semvers
        run: |
          echo unparsed flutter sdk semvers for engine "${{ steps.engine-commit.outputs.hash }}":
          echo "${{ steps.flutter-sdk-version.outputs.semvers }}"
      
      - name: Parse flutter SDK semvers
        run: |
          echo parsed semvers:
          echo ${{ fromJson(steps.flutter-sdk-version.outputs.semvers) }}

  populate-engine-src-cache:
    name: 'Prepopulate engine source cache'
    runs-on: ubuntu-latest
    needs: resolve-version

    steps:
      - uses: actions/checkout@v3
      
      - run: |
          echo github.ref: ${{ github.ref }}

      - name: Read stable engine version
        id: engine-version-stable

        # Read the engine.version.stable file and trim away anything that's not a hex digit
        # (So we don't include whitespace in the output variable, if that's possible)
        run: echo "hash=$(cat engine.version.stable | tr -dc [:xdigit:])" >> $GITHUB_OUTPUT
      
      - name: Log stable engine version
        run: |
          echo stable engine version: "${{ needs.resolve-version.outputs.engine-hash }}"
      
      - name: Create engine cache stamp dir
        shell: bash
        run: |
          mkdir -p engine-cache-stamp

      - uses: actions/cache@v3
        id: stamp-cache
        with:
          path: engine-cache-stamp
          key: engine-cache-stamp-${{ needs.resolve-version.outputs.engine-hash }}

      - name: Log cache hit
        shell: bash
        run: |
          echo cache hit? ${{ steps.stamp-cache.outputs.cache-hit }}

      - uses: actions/cache@v3
        id: cache
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        with:
          path: engine
          key: engine-${{ needs.resolve-version.outputs.engine-hash }}
      
      - name: Cache depot tools
        id: cache-depot-tools
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/depot_tools
          key: ${{ runner.os }}-depot-tools

      - name: Clone depot tools
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ github.workspace }}/depot_tools
  
      - name: Setup depot tools
        run: |
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE/depot_tools >> $GITHUB_PATH

      - name: Update depot tools
        run: |
          gclient --version
          echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
      
      - name: Check if engine has dead libcxx repo
        id: check-dead-libcxx-repo
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          echo "::group::Downloading DEPS file"
          wget https://raw.githubusercontent.com/flutter/engine/${{ needs.resolve-version.outputs.engine-hash }}/DEPS
          echo "::endgroup::"
          
          echo "::group::DEPS file contents"
          cat ./DEPS
          echo "::endgroup::"

          echo '::echo::on'
          if grep -F "7524ef50093a376f334a62a7e5cebf5d238d4c99" ./DEPS
          then
            echo 'dead-libcxx-repo=true' >> $GITHUB_OUTPUT
          else
            echo 'dead-libcxx-repo=false' >> $GITHUB_OUTPUT
          fi
          echo '::echo::off'

          rm ./DEPS

      - name: Bootstrap engine environment
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' && steps.check-dead-libcxx-repo.outputs.dead-libcxx-repo == 'false' }}
        shell: bash
        run: |
          mkdir -p engine
          cp dot-gclient.py engine/.gclient
          
      - name: Bootstrap engine environment (with dead libcxx repo workaround)
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' && steps.check-dead-libcxx-repo.outputs.dead-libcxx-repo == 'true' }}
        shell: bash
        run: |
          mkdir -p engine
          cp dot-gclient-fixed.py engine/.gclient
          
      - name: Install engine sources
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          gclient sync --revision src/flutter@${{ needs.resolve-version.outputs.engine-hash }} -R -D
      
      - name: Install linux arm sysroot
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine
        run: |
          ./src/build/linux/sysroot_scripts/install-sysroot.py --arch=arm

      - name: Prune git history
        if: ${{ steps.stamp-cache.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: engine/src
        run: |
          for FILE in $(find . -type d -name .git)
          do
            pushd "$FILE/.."
            git rev-parse HEAD > .git/shallow
            git tag -d $(git tag -l) || true
            for ref in $(git for-each-ref --format="%(refname)")
            do
              git update-ref -d "$ref"
            done
            git remote remove origin
            git reflog expire --expire=all --all
            git gc --prune=all
            popd
          done
  
  build-engine:
    name: 'build engine'
    runs-on: ubuntu-latest
    needs: [resolve-version, populate-engine-src-cache]
    strategy:
      matrix:
        artifact-name:
          - pi3
          - pi3-64
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
          - x64-generic
        flavor:
          - debug_unopt
          - debug
          - profile
          - release
        exclude:
          # for pi3, pi3-64, pi4, pi4-64 we only build the profile and release flavors.
          # you the point of the pi3, pi4 specific artifacts is CPU-specific optimizations & tuning.
          # (-mcpu, -mtune)
          # You don't need CPU-specific optimizations for (unoptimized) debug builds.
          # Instead, reuse the armv7-generic and aarch64-generic binaries there.
          - artifact-name: pi3
            flavor: debug_unopt
          - artifact-name: pi3
            flavor: debug
          
          - artifact-name: pi3-64
            flavor: debug_unopt
          - artifact-name: pi3-64
            flavor: debug
          
          - artifact-name: pi4
            flavor: debug_unopt
          - artifact-name: pi4
            flavor: debug
          
          - artifact-name: pi4-64
            flavor: debug_unopt
          - artifact-name: pi4-64
            flavor: debug
          
        include:
          # debug_unopt is a debug build with -O0 and -ggdb -fdebug-default-version=4
          - flavor: debug_unopt
            runtime-mode: debug
            unoptimized: true
            nostripped: true
            split-debug-symbols: true
            has-gen-snapshot: false
          
          - flavor: debug
            runtime-mode: debug
            unoptimized: false
            nostripped: true
            split-debug-symbols: true
            has-gen-snapshot: false
          
          - flavor: profile
            runtime-mode: profile
            unoptimized: false
            nostripped: true
            split-debug-symbols: true
            has-gen-snapshot: true
          
          - flavor: release
            runtime-mode: release
            unoptimized: false
            nostripped: true
            split-debug-symbols: true
            has-gen-snapshot: true
            
          # Pi 3 is a Cortex A53.
          # -mcpu=cortex-a53 -mtune=cortex-a53
          - artifact-name: pi3
            cpu: arm
            arm-cpu: cortex-a53
            arm-tune: cortex-a53
            gen-snapshot-path: clang_x64/gen_snapshot
          
          - artifact-name: pi3-64
            cpu: arm64
            arm-cpu: cortex-a53
            arm-tune: cortex-a53
            gen-snapshot-path: clang_x64/gen_snapshot
            
          # Pi 3 is a Cortex A53.
          # -mcpu=cortex-a53 -mtune=cortex-a53
          - artifact-name: pi3
            cpu: arm
            arm-cpu: cortex-a53
            arm-tune: cortex-a53
            gen-snapshot-path: clang_x64/gen_snapshot
          
          - artifact-name: pi3-64
            cpu: arm64
            arm-cpu: cortex-a53
            arm-tune: cortex-a53
            gen-snapshot-path: clang_x64/gen_snapshot
            
          # Pi 4 is a Cortex-A72, but doesn't support cryptography instructions.
          # Use -mcpu=cortex-a72+nocrypto -mtune=cortex-a72
          - artifact-name: pi4
            cpu: arm
            arm-cpu: cortex-a72+nocrypto
            arm-tune: cortex-a72
            gen-snapshot-path: clang_x64/gen_snapshot

          - artifact-name: pi4-64
            cpu: arm64
            arm-cpu: cortex-a72+nocrypto
            arm-tune: cortex-a72
            gen-snapshot-path: clang_x64/gen_snapshot
          
          # Use -mcpu=generic -mtune=generic for the generic builds.
          - artifact-name: armv7-generic
            cpu: arm
            arm-cpu: generic
            arm-tune: generic
            gen-snapshot-path: clang_x64/gen_snapshot
            
          - artifact-name: aarch64-generic
            cpu: arm64
            arm-cpu: generic
            arm-tune: generic
            gen-snapshot-path: clang_x64/gen_snapshot
          
          - artifact-name: x64-generic
            cpu: x64
            gen-snapshot-path: gen_snapshot
          
    steps:
      - uses: actions/checkout@v3

      - name: Log engine version & Build config
        run: |
          echo *** engine version: ***
          echo ${{ needs.resolve-version.outputs.engine-hash }}
          echo '*** build config: ***'
          echo artifact name: ${{ matrix.artifact-name }}
          echo flavor: ${{ matrix.flavor }}
          echo flutter runtime mode: ${{ matrix.runtime-mode }}
          echo unoptimized: ${{ matrix.unoptimized }}
          echo no-stripped: ${{ matrix.nostripped }}
          echo split debug symbols: ${{ matrix.split-debug-symbols }}
          echo has gen_snapshot: ${{ matrix.has-gen-snapshot }}
          echo gen_snapshot path: ${{ matrix.gen-snapshot-path }}
          echo cpu: ${{ matrix.cpu }}
          echo arm-cpu: ${{ matrix.arm-cpu }}
          echo arm-tune: ${{ matrix.arm-tune }}
      
      - name: Cache depot tools
        id: cache-depot-tools
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/depot_tools
          key: ${{ runner.os }}-depot-tools
      
      - name: Clone depot tools
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ github.workspace }}/depot_tools

      - name: Setup depot tools
        run: |
          echo GCLIENT_PY3=1 >> $GITHUB_ENV
          echo DEPOT_TOOLS_UPDATE=0 >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE/depot_tools >> $GITHUB_PATH
      
      - name: Run gclient --version
        run: |
          gclient --version
          
      - name: Download cached engine sources
        uses: actions/cache@v3
        id: cache
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
        with:
          path: engine
          key: engine-${{ needs.resolve-version.outputs.engine-hash }}
  
      - name: Check if downloading engine sources succeeded
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Could not find cached engine source!')
  
      - name: Apply patches
        working-directory: engine/src

        # use git apply instead of git am to avoid `Committer identity unknown` error
        run: |
          git apply $GITHUB_WORKSPACE/0001-fix-armv7-build-make-arm64-tune-work.patch
          git apply $GITHUB_WORKSPACE/0002-always-include-debug-symbols.patch
      
      - name: Show git status
        working-directory: engine/src
        run: git status
      
      - name: Override PKGCONFIG_PATH for linux arm
        if: matrix.cpu == 'arm'
        run:
          echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/engine/src/build/linux/debian_sid_arm-sysroot/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig" >> "$GITHUB_ENV"

      - name: Configure engine
        working-directory: engine
        run: |
          ./src/flutter/tools/gn \
            --runtime-mode ${{ matrix.runtime-mode }} \
            --target-os linux \
            --linux-cpu ${{ matrix.cpu }} \
            ${{ matrix.cpu == 'arm' && '--arm-float-abi hard' || ''}} \
            --target-dir build \
            --embedder-for-target \
            --disable-desktop-embeddings \
            --no-build-glfw-shell \
            --no-build-embedder-examples \
            --no-enable-unittests \
            --no-goma \
            ${{ matrix.unoptimized && '--unoptimized' || ''}} \
            ${{ matrix.nostripped && '--no-stripped' || ''}}
      
      - name: Append arm_cpu & arm_tune args
        if: ${{ matrix.arm-cpu || matrix.arm-tune }}
        working-directory: engine/src/out/build/
        run: |
          echo 'arm_cpu = "${{ matrix.arm-cpu }}"' >> args.gn
          echo 'arm_tune = "${{ matrix.arm-tune }}"' >> args.gn
          echo '*** args.gn file: ***'
          cat args.gn
          echo '*** rerunning gn gen ***'
          gn gen --export-compile-commands .
      
      - name: Build engine
        shell: bash
        working-directory: engine/src/out/build
        run: |
          ninja libflutter_engine.so ${{ matrix.has-gen-snapshot && matrix.gen-snapshot-path || '' }} flutter_embedder.h icudtl.dat

      - name: Add engine.version and dart-sdk.version file
        run: |
          cp engine.version.stable ${{ github.workspace }}/engine/src/out/build/engine.version
          pushd ${{ github.workspace }}/engine/src/third_party/dart
          git rev-parse HEAD > ${{ github.workspace }}/engine/src/out/build/dart-sdk.version
          popd
      
      - name: Move gen_snapshot
        if: ${{ matrix.has-gen-snapshot && matrix.gen-snapshot-path != 'gen_snapshot' }}
        working-directory: ${{ github.workspace }}/engine/src/out/build/
        run: |
          mv ./${{ matrix.gen-snapshot-path }} ./gen_snapshot
      
      - name: Split debug symbols
        if: ${{ matrix.split-debug-symbols == true }}
        working-directory: ${{ github.workspace }}/engine/src/out/build/
        run: |
          ${{ github.workspace }}/engine/src/buildtools/linux-x64/clang/bin/llvm-objcopy --only-keep-debug libflutter_engine.so libflutter_engine.${{ matrix.flavor }}.dbgsyms
          ${{ github.workspace }}/engine/src/buildtools/linux-x64/clang/bin/llvm-objcopy --strip-debug libflutter_engine.so
          ${{ github.workspace }}/engine/src/buildtools/linux-x64/clang/bin/llvm-objcopy --add-gnu-debuglink=libflutter_engine.${{ matrix.flavor }}.dbgsyms libflutter_engine.so

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}
          path: |
            ${{ github.workspace }}/engine/src/out/build/compile_commands.json
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.so
            ${{ github.workspace }}/engine/src/out/build/libflutter_engine.${{ matrix.flavor }}.dbgsyms
            ${{ github.workspace }}/engine/src/out/build/icudtl.dat
            ${{ github.workspace }}/engine/src/out/build/flutter_embedder.h
            ${{ matrix.has-gen-snapshot && format('{0}/engine/src/out/build/gen_snapshot', github.workspace) || '' }}
            ${{ github.workspace }}/engine/src/out/build/engine.version
            ${{ github.workspace }}/engine/src/out/build/dart-sdk.version
  
  package:
    name: 'Package artifacts'
    runs-on: ubuntu-latest
    needs: [build-engine, resolve-version]
    strategy:
      matrix:
        artifact-name:
          - pi3
          - pi3-64
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
          - x64-generic
        
        include:
          # For each artifact (target), we also have an architecture-generic variant.
          # We use those for debug & debug_unopt, since we don't actually build architecture-specific
          # artifacts there.
          - artifact-name: pi3
            generic-arch-artifact-name: armv7-generic
          - artifact-name: pi3-64
            generic-arch-artifact-name: aarch64-generic

          - artifact-name: pi4
            generic-arch-artifact-name: armv7-generic
          - artifact-name: pi4-64
            generic-arch-artifact-name: aarch64-generic

          - artifact-name: armv7-generic
            generic-arch-artifact-name: armv7-generic
          - artifact-name: aarch64-generic
            generic-arch-artifact-name: aarch64-generic
          
          - artifact-name: x64-generic
            generic-arch-artifact-name: x64-generic
    steps:
      - uses: actions/checkout@v3
      
      - name: Log engine version & Build config
        run: |
          echo *** engine version: ***
          echo ${{ needs.resolve-version.outputs.engine-hash }}
          echo '*** config: ***'
          echo artifact name: ${{ matrix.artifact-name }}
          echo generic-arch-artifact-name: ${{ matrix.generic-arch-artifact-name }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.generic-arch-artifact-name }}-debug
          path: debug
      
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.generic-arch-artifact-name }}-debug_unopt
          path: debug_unopt
        
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-profile
          path: profile
        
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-release
          path: release
          
      - name: Package artifacts
        env:
          XZ_DEFAULTS: "-T 0"
        run: |
          mkdir -p pkg
          
          pushd pkg
          mv ../engine.version.stable ./engine.version
          mv ../debug_unopt/libflutter_engine.so ./libflutter_engine.so.debug_unopt
          mv ../debug/libflutter_engine.so ./libflutter_engine.so.debug
          mv ../profile/libflutter_engine.so ./libflutter_engine.so.profile
          mv ../release/libflutter_engine.so ./libflutter_engine.so.release
          mv ../debug/flutter_embedder.h ./flutter_embedder.h
          mv ../debug/icudtl.dat ./icudtl.dat
          mv ../debug/engine.version ./engine.version
          mv ../debug/dart-sdk.version ./dart-sdk.version
          
          # We previously copied <build-dir>/clang_x64/gen_snapshot to <build-dir>/gen_snapshot,
          # so we don't need the clang_x64 part here.
          mv ../profile/gen_snapshot ./gen_snapshot_linux_x64_profile
          mv ../release/gen_snapshot ./gen_snapshot_linux_x64_release
          
          # The github actions artifact uploader/downloader don't keep the file permissions, so we need to mak
          # the binaries executable again.
          # We tar the files afterwards though, which keeps the permissions.
          chmod +x ./libflutter_engine.so* ./gen_snapshot*

          tar -cJvf ../${{ matrix.artifact-name }}.tar.xz *
          popd
      
      - name: Package debug symbols
        env:
          XZ_DEFAULTS: "-T 0"
        run: |
          mkdir -p pkg-dbgsyms

          pushd pkg-dbgsyms
          mv ../debug_unopt/libflutter_engine.debug_unopt.dbgsyms ./libflutter_engine.debug_unopt.dbgsyms
          mv ../debug/libflutter_engine.debug.dbgsyms ./libflutter_engine.debug.dbgsyms
          mv ../profile/libflutter_engine.profile.dbgsyms ./libflutter_engine.profile.dbgsyms
          mv ../release/libflutter_engine.release.dbgsyms ./libflutter_engine.release.dbgsyms

          tar -cJvf ../${{ matrix.artifact-name }}-dbgsyms.tar.xz *
          popd
      
      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            pkg/engine.version
            pkg/libflutter_engine.so.debug_unopt
            pkg/libflutter_engine.so.debug
            pkg/libflutter_engine.so.profile
            pkg/libflutter_engine.so.release
            pkg/flutter_embedder.h
            pkg/icudtl.dat
            pkg/engine.version
            pkg/dart-sdk.version
            pkg/gen_snapshot_linux_x64_profile
            pkg/gen_snapshot_linux_x64_release
      
      - name: Upload artifacts (.tar.xz)
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-tar-xz
          path: |
            ${{ matrix.artifact-name }}.tar.xz
      
      - name: Upload debug symbols (.tar.xz)
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-dbgsyms-tar-xz
          path: |
            ${{ matrix.artifact-name }}-dbgsyms.tar.xz
  
  build-app:
    name: 'Build test app'
    runs-on: ubuntu-latest
    needs: [resolve-version, package]
    strategy:
      matrix:
        artifact-name:
          - pi3
          - pi3-64
          - pi4
          - pi4-64
          - armv7-generic
          - aarch64-generic
        flavor:
          - debug_unopt
          - debug
          - profile
          - release
        include:
          - flavor: debug_unopt
            runtime-mode: debug
          - flavor: debug
            runtime-mode: debug
          - flavor: profile
            runtime-mode: profile
          - flavor: release
            runtime-mode: release
          
          - artifact-name: pi3
            arch: armv7
          - artifact-name: pi3-64
            arch: aarch64
          - artifact-name: pi4
            arch: armv7
          - artifact-name: pi4-64
            arch: aarch64
          - artifact-name: armv7-generic
            arch: armv7
          - artifact-name: aarch64-generic
            arch: aarch64
    steps:
      - uses: actions/checkout@v3
      
      # TODO: Use the exact flutter version here
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ needs.resolve-version.outputs.first-semver }}
          cache: true
      
      - name: Determine flutter SDK path
        run: |
          echo "FLUTTER_SDK_PATH=$(dirname $(dirname $(which flutter)))" >> $GITHUB_ENV
      
      - name: Log flutter SDK path
        run: |
          echo flutter sdk path: $FLUTTER_SDK_PATH
           
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: binaries
      
      # Seems like this is necessary. Maybe it's not if we use a tar-file instead.
      - name: Make binaries executable
        working-directory: binaries
        run: |
          chmod +x ./libflutter_engine.so* ./gen_snapshot*
      
      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - working-directory: test_app
        run: |
          flutter pub get
          flutter build bundle
          cp ../binaries/libflutter_engine.so.${{ matrix.flavor }} build/flutter_assets/libflutter_engine.so
          cp ../binaries/icudtl.dat build/flutter_assets/
      
      - name: Build kernel snapshot (profile)
        if: ${{ matrix.runtime-mode == 'profile' }}
        working-directory: test_app
        run: |
          $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/dart \
            $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/snapshots/frontend_server.dart.snapshot \
            --sdk-root $FLUTTER_SDK_PATH/bin/cache/artifacts/engine/common/flutter_patched_sdk \
            --target=flutter \
            --aot --tfa \
            -Ddart.vm.product=false \
            -Ddart.vm.profile=true \
            --packages .dart_tool/package_config.json \
            --output-dill build/kernel_snapshot.dill \
            --verbose \
            --depfile build/kernel_snapshot.d \
            package:test_app/main.dart
            
      - name: Build kernel snapshot (release)
        if: ${{ matrix.runtime-mode == 'release' }}
        working-directory: test_app
        run: |
          $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/dart \
            $FLUTTER_SDK_PATH/bin/cache/dart-sdk/bin/snapshots/frontend_server.dart.snapshot \
            --sdk-root $FLUTTER_SDK_PATH/bin/cache/artifacts/engine/common/flutter_patched_sdk_product \
            --target=flutter \
            --aot --tfa \
            -Ddart.vm.product=true \
            -Ddart.vm.profile=false \
            --packages .dart_tool/package_config.json \
            --output-dill build/kernel_snapshot.dill \
            --verbose \
            --depfile build/kernel_snapshot.d \
            package:test_app/main.dart
      
      # Specify --sim-use-hardfp if we're building for armv7.
      - name: Build app.so (armv7)
        if: ${{ (matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release') && (matrix.arch == 'armv7') }}
        working-directory: test_app
        run: |
          ../binaries/gen_snapshot_linux_x64_${{ matrix.runtime-mode }} \
            --deterministic \
            --snapshot_kind=app-aot-elf \
            --elf=build/flutter_assets/app.so \
            --strip \
            --sim-use-hardfp \
            --verbose \
            build/kernel_snapshot.dill

      - name: Build app.so (aarch64)
        if: ${{ (matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release') && (matrix.arch == 'aarch64') }}
        working-directory: test_app
        run: |
          ../binaries/gen_snapshot_linux_x64_${{ matrix.runtime-mode }} \
            --deterministic \
            --snapshot_kind=app-aot-elf \
            --elf=build/flutter_assets/app.so \
            --strip \
            --verbose \
            build/kernel_snapshot.dill
            
      - name: Copy asset bundle
        run: |
          cp -r test_app/build/flutter_assets app-assets

      - name: Upload app assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}-app-assets
          path: app-assets
  
#  test-app:
#    name: 'Test app on a Raspberry Pi'
#    runs-on: ${{ matrix.runner }}
#    needs: [build-app]
#    strategy:
#      matrix:
#        artifact-name:
#          - pi3
#          - pi3-64
#          - pi4
#          - pi4-64
#          - armv7-generic
#          - aarch64-generic
#        flavor:
#          - debug_unopt
#          - debug
#          - profile
#          - release
#        include:
#          - flavor: debug_unopt
#            runtime-mode: debug
#          - flavor: debug
#            runtime-mode: debug
#          - flavor: profile
#            runtime-mode: profile
#          - flavor: release
#            runtime-mode: release
#
#          - artifact-name: pi3
#            runner: pi4-32
#          - artifact-name: pi3-64
#            runner: pi4-64
#          - artifact-name: pi4
#            runner: pi4-32
#          - artifact-name: pi4-64
#            runner: pi4-64
#          - artifact-name: armv7-generic
#            runner: pi4-32
#          - artifact-name: aarch64-generic
#            runner: pi4-64
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: ${{ matrix.artifact-name }}-${{ matrix.flavor }}-app-assets
#          path: app
#
#      - uses: actions/checkout@v3
#        with:
#          repository: ardera/flutter-pi
#          path: flutter-pi
#
#      - name: Configure
#        working-directory: flutter-pi
#        run: |
#          cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -S. -Bbuild
#
#      - name: Build
#        working-directory: flutter-pi/build
#        run: ninja
#
#      # The app should quit with exit code 0 by itself.
#      - name: Run app (debug)
#        if: ${{ matrix.runtime-mode == 'debug' }}
#        timeout-minutes: 3
#        run: |
#          flutter-pi/build/flutter-pi app
#
#      - name: Run app (profile / release)
#        if: ${{ matrix.runtime-mode == 'profile' || matrix.runtime-mode == 'release' }}
#        timeout-minutes: 3
#       run: |
#          flutter-pi/build/flutter-pi --${{ matrix.runtime-mode }} app
#
#  push-old-repo:
#    name: 'Push binaries to old engine binaries repo'
#    runs-on: ubuntu-latest
#    needs: [resolve-version, package, test-app]
#    if: startsWith(github.ref, 'refs/tags')
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Log engine version
#        run: |
#          echo *** engine version: ***
#         echo ${{ needs.resolve-version.outputs.engine-hash }}
#
#      - uses: actions/checkout@v3
#        with:
#          repository: ardera/flutter-engine-binaries-for-arm
#          token: ${{ secrets.OLD_ENGINE_BINARIES_REPO_TOKEN }}
#          path: engine-binaries
#          ref: main
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: armv7-generic
#         path: engine-binaries/arm
#
#      - uses: actions/download-artifact@v3
#       with:
#          name: aarch64-generic
#          path: engine-binaries/arm64
#
#      - working-directory: engine-binaries
#        run: |
#          mv arm/flutter_embedder.h flutter_embedder.h
#          rm arm64/flutter_embedder.h
#          rm arm/*.debug_unopt
#          rm arm64/*.debug_unopt
#
#      - name: Log flutter version
#        run: |
#          echo flutter semvers: ${{ fromJson(needs.resolve-version.outputs.sdk-semvers) }}
#
#      - name: Commit new stable engine version
#        uses: EndBug/add-and-commit@v9
#        with:
#          default_author: github_actions
#          cwd: ./engine-binaries
#          message: 'update engine binaries for flutter ${{ join(fromJson(needs.resolve-version.outputs.sdk-semvers)) }}'
#          tag: engine_${{ needs.resolve-version.outputs.engine-hash }} --force
#          tag_push: '--force'
  
  release:
    name: 'Publish release'
    runs-on: ubuntu-latest
    needs: [resolve-version, package, test-app]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Log engine version
        run: |
          echo *** engine version: ***
          echo ${{ needs.resolve-version.outputs.engine-hash }}
      
      - name: Create release-files directory
        run: |
          mkdir -p release-files

      - uses: actions/download-artifact@v3
        with:
          name: pi3-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi3-dbgsyms-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi3-64-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi3-64-dbgsyms-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi4-tar-xz
          path: release-files

      - uses: actions/download-artifact@v3
        with:
          name: pi4-dbgsyms-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi4-64-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: pi4-64-dbgsyms-tar-xz
          path: release-files

      - uses: actions/download-artifact@v3
        with:
          name: armv7-generic-tar-xz
          path: release-files

      - uses: actions/download-artifact@v3
        with:
          name: armv7-generic-dbgsyms-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: aarch64-generic-tar-xz
          path: release-files

      - uses: actions/download-artifact@v3
        with:
          name: aarch64-generic-dbgsyms-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: x64-generic-tar-xz
          path: release-files
      
      - uses: actions/download-artifact@v3
        with:
          name: x64-generic-dbgsyms-tar-xz
          path: release-files

      # Show the complete file tree, and print all metadata (permissions, owner, group, filesize, last modification date)
      - name: Show file tree
        run: |
          sudo apt-get install -y tree
          tree -apugshDF
      
      - uses: softprops/action-gh-release@v1
        with:
          name: ${{ join(fromJson(needs.resolve-version.outputs.sdk-semvers)) }}
          body: |
            | name | info | reference |
            | - | - | - |
            | flutter channel | stable | |
            | flutter version | ${{ needs.resolve-version.outputs.first-semver }} | [flutter/flutter@`${{ needs.resolve-version.outputs.first-semver }}`](https://github.com/flutter/flutter/tree/${{ needs.resolve-version.outputs.first-semver }}) |
            | engine version | ${{ needs.resolve-version.outputs.first-semver }} | [flutter/engine@`${{ needs.resolve-version.outputs.first-semver }}`](https://github.com/flutter/engine/tree/${{ needs.resolve-version.outputs.first-semver }}) |
          fail_on_unmatched_files: true
          files: |
            release-files/*
